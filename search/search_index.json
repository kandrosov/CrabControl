{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RunKit","text":"<p>RunKit is a toolkit to simplify root-tuple production and job submission within the CMS infrastructure.</p>"},{"location":"#tools","title":"Tools:","text":"<ul> <li>crabOverseer.py: a tool to manage CRAB tasks and the following post-processing steps.</li> <li>skim_tree.py: a tool to skim a TTree content into a new root file</li> <li>checkDatasetExistance.py: check that dataset exists in DAS</li> <li>checkRootFile.py: check that root file is not corrupted</li> <li>cmsEnv.sh: run command line within the CMSSW environment</li> <li>envToJson.py: convert environment to json</li> <li>CreateVomsProxy: LAW task to create a VOMS proxy</li> <li>haddnano.py: hadd nanoAOD files (original code is copied from nanoAOD-tools)</li> <li>haddnanoEx.py: hadd nanoAOD files with an extended functionality</li> <li>includeCMSSWlibs.py: load some CMSSW libraries to be used with standalone ROOT</li> <li>inspectNanoFile.py: inspect nanoAOD file (original code is copied from CMS software)</li> <li>sh_tools.py: a set of common tools to run sub-processes, copy remote files, ...</li> <li>xsdb_search.py: search sample cross-section in XSDB (original code is copied from CMS software)</li> </ul>"},{"location":"crabOverseer/","title":"crabOverseer documentation","text":"<p><code>crabOverseer</code> is a tool to manage CRAB tasks and the following post-processing steps.</p> <p><code>crabOverseer</code> (and, in general, <code>RunKit</code>) is intended as a submodule for a task-specific framework that setups the environment and provides the necessary configuration files. Here are some examples of frameworks that use <code>RunKit</code>:</p> <ul> <li>NanoProd</li> <li>TauMLTools</li> <li>HH-&gt;bbtautau framework</li> <li>HNLProd</li> </ul>"},{"location":"crabOverseer/#logical-flow","title":"Logical flow","text":"<ul> <li>Preparation steps:<ol> <li>Setup framework area and environment on the site where the crab outputs will be staged out</li> <li>Define crabOverseer configurations</li> <li>Setup VOMS certificates</li> <li>Make sure that there is enough space to store the crab outputs<ul> <li>with the current implementation (to be improved), you should reserve 2x the expected size to store intermediate outputs, which can be removed after the post-processing is finished</li> </ul> </li> <li>Run dry-run submission to make sure that setup works as expected</li> </ol> </li> <li>Submission and the main <code>crabOverseer</code> loop:<ol> <li>Update the status of all active tasks:<ul> <li>if a task is new, submit it</li> <li>if a task is submitted on CRAB, update the status</li> <li>if a task is failed on crab, create and submit a crab recovery task<ul> <li>if the maximal number of recovery attempts is reached, create local recovery jobs</li> </ul> </li> <li>if a task is finished on CRAB, check that all outputs are present<ul> <li>if not, create and submit a crab (or local) task</li> <li>if yes, create a local post-processing job</li> </ul> </li> </ul> </li> <li>Submit and monitor the list of local recovery and post-processing jobs defined in the previous step<ul> <li>law is used to submit and monitor the jobs on a local grid</li> </ul> </li> <li>If there are non-finished tasks, wait for <code>updateInterval</code> (starting from the last beginning of step 1) and repeat the loop</li> <li>If all tasks are finished, finish <code>crabOverseer</code>.</li> </ol> </li> </ul>"},{"location":"crabOverseer/#usage","title":"Usage","text":"<pre><code>python RunKit/crabOverseer.py [-h] [--work-area WORK_AREA] [--cfg CFG] [--no-status-update] [--update-cfg] [--no-loop] [--select SELECT] [--action ACTION] [--verbose VERBOSE] [task_file ...]\n</code></pre> <p>Command line arguments:</p> Argument Description -h, --help Show the help message and exit --work-area WORK_AREA The working area to store crabOverseer state (default: $PWD/.crabOverseer) --cfg CFG The main crabOverseer configuration file (see description below) task_file The list of files with a description of tasks to be managed by crabOverseer (see description below) --no-status-update If specified, do not call crab to update tasks statuses and proceed with the next steps --update-cfg Update the main and all task configurations from the config files provided in --cfg and task_file arguments --no-loop Run one iteration of task update and submission and exit --action ACTION Apply an action on the selected tasks and exit (see description below) --select SELECT Select tasks to which the action should be applied (default: select all) --verbose VERBOSE Verbosity level (default: 1) <p>After the first call, the crabOverseer state is stored in the working area, and the subsequent calls will use it. Therefore, it is not necessary to provide arguments for the subsequent calls, meaning that the following command will be enough:</p> <p><pre><code>python RunKit/crabOverseer.py\n</code></pre> Alternatively, if a non-default working area is used: <pre><code>python RunKit/crabOverseer.py --work-area &lt;working_area&gt;\n</code></pre></p>"},{"location":"crabOverseer/#main-configuration-file-format","title":"Main configuration file format","text":"<p>The main <code>crabOversser</code> configuration file uses the YAML format. It contains definitions that are common for all tasks. A task-specific definition can be defined (or overwritten) in the task configuration file.</p>"},{"location":"crabOverseer/#supported-parameters","title":"Supported parameters","text":"Parameter Description cmsswPython path to the CMSSW python configuration file. For a nanoAOD production, use <code>RunKit/nanoProdWrapper.py</code>. params list of parameters that will be passed during execution of <code>cmsRun</code> on the <code>cmsswPython</code> file splitting Crab job splitting. Currently, only <code>FileBased</code> splitting is supported unitsPerJob number of units per job (i.e. files per job for <code>FileBased</code> splitting) for the initial task submission. This parameter is decreased by a factor of 2 for each consecutive recovery submission. Suggested value: 16 scriptExe Executable script that will be run on the remote nodes. Suggested value: <code>RunKit/crabJob.sh</code> outputFiles List of output files produced by the crab job. The suggested value for a nanoAOD production: <code>- nano.root</code> filesToTransfer List of files that CRAB will transfer to the remote nodes site Site where CRAB will transfer jobs outputs. Example: <code>T2_CH_CERN</code> crabOutput The path where jobs outputs will be stored using <code>/store/...</code> notation localCrabOutput path where <code>crabOutput</code> is mounted in the local file system finalOutput path in the local file system where the final post-processed outputs will be stored maxMemory Memory requirements per job in MB. Suggested value: 2500 numCores number of cores per job. Suggested value: 1 inputDBS Input DBS. Suggested value: global allowNonValid Allow processing datasets listed as not VALID on DAS. Suggested value: False dryrun Run CRAB in a dry-run mode (for testing). Suggested value: False maxRecoveryCount Maximal number of recovery attempts. Suggested value:  3 updateInterval Interval in minutes between the task update &amp; post-processing iterations localProcessing Parameters for the local recovery and post-processing step. localProcessing / lawTask Name of the law task. Suggested value: <code>ProdTask</code> localProcessing / workflow Workflow type. Currently, only the <code>htcondor</code> workflow is supported localProcessing / bootstrap Bootstrap file to load environment on a remote node. Suggested value: <code>bootstrap.sh</code> localProcessing / requirements (optional) additional requirement for a remote node targetOutputFileSize Desired size of the output files in MiB. Suggested value: 2048 renewKerberosTicket Periodically renew the validity of a Kerberos ticket. Suggested value: <code>True</code> if run on AFS; otherwise <code>False</code> whitelistFinalRecovery list of \"most reliable\" sites where the final recovery will be performed <p>Example configuration file: <pre><code>cmsswPython: RunKit/nanoProdWrapper.py\nparams:\ncustomise: NanoProd/NanoProd/customize.customize\nskimCfg: skim_htt.yaml\nskimSetup: skim\nskimSetupFailed: skim_failed\nmaxEvents: -1\nsplitting: FileBased\nunitsPerJob: 16\nscriptExe: RunKit/crabJob.sh\noutputFiles:\n- nano.root\nfilesToTransfer:\n- RunKit/crabJob.sh\n- RunKit/crabJob.py\n- RunKit/crabJob_nanoProd.py\n- RunKit/skim_tree.py\n- RunKit/sh_tools.py\n- NanoProd/config/skim_htt.yaml\n- NanoProd/python/customize.py\nsite: T2_CH_CERN\ncrabOutput: /store/group/phys_tau/kandroso/prod\nlocalCrabOutput: /eos/cms/store/group/phys_tau/kandroso/prod\nfinalOutput: /eos/cms/store/group/phys_tau/kandroso/final\nmaxMemory: 2500\nnumCores: 1\ninputDBS: global\nallowNonValid: False\ndryrun: False\nmaxRecoveryCount: 3\nupdateInterval: 60\nlocalProcessing:\nlawTask: ProdTask\nworkflow: htcondor\nbootstrap: bootstrap.sh\ntargetOutputFileSize: 2048\nrenewKerberosTicket: True\nwhitelistFinalRecovery:\n- T1_DE_KIT\n- T2_CH_CERN\n- T2_DE_DESY\n- T2_IT_Legnaro\n- T3_CH_PSI\n</code></pre></p>"},{"location":"crabOverseer/#task-configuration-file-format","title":"Task configuration file format","text":"<p>The task configuration file uses the YAML format. Each file contains a list of tasks with the same set of parameters. The parameters defined in the task configuration file overwrite the parameters defined in the main configuration file.</p>"},{"location":"crabOverseer/#format","title":"Format","text":"<ul> <li>config: Section with the task-specific parameters. Same as for the main configuration |</li> <li>all items with names different from \"config\" are considered task descriptions. Two formats are possible:<ul> <li>short format:     <pre><code>dataset_name: dataset_path\n</code></pre>     Example:     <pre><code>TTTo2L2Nu: /TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v1/MINIAODSIM\n</code></pre></li> <li> <p>long format, where some parameters are overwritten:     <pre><code>dataset_name:\npath: dataset_path\nparam1: value1\n...\n</code></pre></p> <p>Example: <pre><code>QCD_HT200to300:\ninputDataset: /QCD_HT200to300_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v2/MINIAODSIM\nignoreFiles:\n- /store/mc/RunIISummer20UL18MiniAODv2/QCD_HT200to300_TuneCP5_13TeV-madgraphMLM-pythia8/MINIAODSIM/106X_upgrade2018_realistic_v16_L1v1-v2/70000/C38FF40C-E9F0-CB48-B9C7-1E874A4AF010.root\n</code></pre></p> </li> </ul> </li> </ul> <p>Example configuration file: <pre><code>config:\nparams:\nsampleType: mc\nera: Run2_2018\nstoreFailed: True\n\nTTTo2L2Nu: /TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v1/MINIAODSIM\nTTToHadronic: /TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v1/MINIAODSIM\nTTToSemiLeptonic: /TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18MiniAODv2-106X_upgrade2018_realistic_v16_L1v1-v2/MINIAODSIM\n</code></pre></p>"},{"location":"crabOverseer/#actions","title":"Actions","text":"<p>When something goes wrong and automatic recovery fails, it could be necessary to apply some manual manipulations to the tasks. Such intervention can be done by using <code>crabOverseer</code> actions. Alternatively, manual editing of task configuration and status files could be required in complicated cases.</p> <p>Action is applied from a command line on the selected tasks. Tasks can be selected with the <code>--select</code> argument using Python syntax. Selection is applied to each individual crabTask object.</p> <p>Examples:</p> <ul> <li><code>--select 'name == \"TTTo2L2Nu\"'</code> : select task with name <code>TTTo2L2Nu</code></li> <li><code>--select 'task.params[\"sampleType\"] == \"mc\"'</code>: select all tasks that process MC datasets</li> </ul> <p>The following actions are supported:</p> <ul> <li> <p>print: print names of the selected tasks</p> <p>Example: <pre><code>python RunKit/crabOverseer.py --action print --select 'task.params[\"sampleType\"] == \"mc\"'\n</code></pre></p> </li> <li> <p>list_files_to_process: print a list of files that are yet to be processed</p> <p>Example: <pre><code>python RunKit/crabOverseer.py --action list_files_to_process --select 'name == \"TTTo2L2Nu\"'\n</code></pre></p> </li> <li> <p>kill: kill selected tasks</p> <p>Example: <pre><code>python RunKit/crabOverseer.py --action kill --select 'name == \"TTTo2L2Nu\"'\n</code></pre></p> </li> <li> <p>remove: remove selected tasks (cannot be undone!)</p> <p>Example: <pre><code>python RunKit/crabOverseer.py --action remove --select 'name == \"TTTo2L2Nu\"'\n</code></pre></p> </li> <li> <p>remove_final_output: remove final outputs of selected tasks</p> <p>Example: <pre><code>python RunKit/crabOverseer.py --action remove_final_output --select 'name == \"TTTo2L2Nu\"'\n</code></pre></p> </li> <li> <p>run_cmd: execute the specified Python code on each selected task</p> <p>Examples: <pre><code>python RunKit/crabOverseer.py --action 'run_cmd task.kill()' --select 'name == \"TTTo2L2Nu\"'\npython RunKit/crabOverseer.py --action 'run_cmd task.taskStatus.status = status.WaitingForRecovery' --select 'name == \"TTTo2L2Nu\"'\n</code></pre></p> </li> </ul>"},{"location":"otherTools/","title":"Tools","text":"<p>TODO</p>"},{"location":"skim_tree/","title":"Skim tree","text":"<p>TODO</p>"}]}